/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Slug = {
  _type: "slug";
  current: string;
  source?: string;
};

export type CreditTransaction = {
  _id: string;
  _type: "creditTransaction";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  date?: string;
  market?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "market";
  };
  vendor?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "user";
  };
  amount?: number;
  reason?: string;
};

export type Message = {
  _id: string;
  _type: "message";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  for?: Array<{
    vendor?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "user";
    };
    read?: boolean;
    _type: "forObject";
    _key: string;
  }>;
  from?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "user";
  };
  subject?: string;
  body?: string;
};

export type PaymentRecord = {
  _id: string;
  _type: "paymentRecord";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  user?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "user";
  };
  market?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "market";
  };
  amount?: {
    total?: number;
    paid?: number;
    owed?: number;
    hst?: number;
  };
  payments?: Array<{
    stripePaymentIntentId?: string;
    paymentType?: string;
    amount?: number;
    paymentDate?: string;
    _type: "payment";
    _key: string;
  }>;
  createdAt?: string;
  updatedAt?: string;
  items?: Array<{
    price?: number;
    date?: string;
    tableId?: string;
    _type: "item";
    _key: string;
  }>;
  paymentReturned?: boolean;
  status?: "pending" | "paid" | "cancelled";
  specialRequest?: string;
};

export type Market = {
  _id: string;
  _type: "market";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  dates?: Array<string>;
  marketCover?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  venue?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "venue";
  };
  lastDayToBook?: string;
  vendorInstructions?: string;
  daysWithTables?: Array<{
    date?: string;
    tables?: Array<{
      table?: {
        id?: string;
        price?: number;
      };
      booked?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "user";
      };
      _type: "table";
      _key: string;
    }>;
    _type: "day";
    _key: string;
  }>;
  vendors?: Array<{
    vendor?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "user";
    };
    datesBooked?: Array<{
      date?: string;
      tableId?: string;
      _type: "day";
      _key: string;
    }>;
    specialRequests?: string;
    _type: "vendorDetails";
    _key: string;
  }>;
  cancelled?: boolean;
  archived?: boolean;
  allDaysMandatory?: boolean;
};

export type Venue = {
  _id: string;
  _type: "venue";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  address?: string;
  city?: string;
  hours?: string;
  phone?: string;
  securityPhone?: string;
  loadInInstructions?: string;
  venueMap?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  tables?: Array<string>;
  tableInfo?: Array<{
    id?: string;
    price?: number;
    _type: "table";
    _key: string;
  }>;
};

export type Terms = {
  _id: string;
  _type: "terms";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  terms?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
};

export type VendorCategory = {
  _id: string;
  _type: "vendorCategory";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
};

export type User = {
  _id: string;
  _type: "user";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  firstName?: string;
  lastName?: string;
  email?: string;
  hasImage?: boolean;
  image?: string;
  role?: "admin" | "vendor" | "dev";
  business?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "business";
  };
  acceptedTerms?: {
    dateAccepted?: string;
    accepted?: boolean;
  };
  status?: "approved" | "pending" | "suspended" | "archived";
  credits?: number;
};

export type Business = {
  _id: string;
  _type: "business";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  address1?: string;
  address2?: string;
  city?: string;
  province?: string;
  postalCode?: string;
  country?: string;
  phone?: string;
  businessName?: string;
  instagramHandle?: string;
  industry?: string;
  logo?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  pdf?: Array<{
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.fileAsset";
    };
    media?: unknown;
    _type: "file";
    _key: string;
  }>;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type AllSanitySchemaTypes = SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | Geopoint | Slug | CreditTransaction | Message | PaymentRecord | Market | Venue | Terms | VendorCategory | User | Business | SanityFileAsset | SanityImageCrop | SanityImageHotspot | SanityImageAsset | SanityAssetSourceData | SanityImageMetadata;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./app/admin/dashboard/markets/_components/saveMarketTablesUpdateAction.ts
// Variable: MARKET_UPDATE_QUERY
// Query: *[_type == "market" && _id == $marketId] [0] {  vendors,  daysWithTables}
export type MARKET_UPDATE_QUERYResult = {
  vendors: Array<{
    vendor?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "user";
    };
    datesBooked?: Array<{
      date?: string;
      tableId?: string;
      _type: "day";
      _key: string;
    }>;
    specialRequests?: string;
    _type: "vendorDetails";
    _key: string;
  }> | null;
  daysWithTables: Array<{
    date?: string;
    tables?: Array<{
      table?: {
        id?: string;
        price?: number;
      };
      booked?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "user";
      };
      _type: "table";
      _key: string;
    }>;
    _type: "day";
    _key: string;
  }> | null;
} | null;
// Variable: PAYMENT_RECORD_UPDATE_QUERY
// Query: *[_type == "paymentRecord" && market._ref == $marketId && user._ref == $vendorId] {  items,  status,  _id}
export type PAYMENT_RECORD_UPDATE_QUERYResult = Array<{
  items: Array<{
    price?: number;
    date?: string;
    tableId?: string;
    _type: "item";
    _key: string;
  }> | null;
  status: "cancelled" | "paid" | "pending" | null;
  _id: string;
}>;

// Source: ./sanity/queries/admin/vendors.ts
// Variable: VENDOR_BUSINESS_NAME_BY_ID_QUERY
// Query: *[_type == "user" && _id == $id][0] {    "businessName": business -> businessName  }
export type VENDOR_BUSINESS_NAME_BY_ID_QUERYResult = {
  businessName: string | null;
} | null;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "*[_type == \"market\" && _id == $marketId] [0] {\n  vendors,\n  daysWithTables\n}": MARKET_UPDATE_QUERYResult;
    "*[_type == \"paymentRecord\" && market._ref == $marketId && user._ref == $vendorId] {\n  items,\n  status,\n  _id\n}": PAYMENT_RECORD_UPDATE_QUERYResult;
    "\n  *[_type == \"user\" && _id == $id][0] {\n    \"businessName\": business -> businessName\n  }\n": VENDOR_BUSINESS_NAME_BY_ID_QUERYResult;
  }
}
